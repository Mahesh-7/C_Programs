

/*************************************** start of tips **************************/


1.flow chart for all problem
2.declare and initialize variable with flags --> int iarr[MAX]={0};  //all 10 values will be zero
3.dont allow warning codes for further implementation
4.check return values of all predefined and user defined function to verify memory allocations and flags 
5.use enumerations to check errors and status of incoming datas of codes for debugging
6.use string safe functions strcpy_s() instead strcpy to avoid bugs in codes
7.avoid function if else logics to return single ans results
8.use naming conventions,braces properly
9.avoid more arguments passes to functions instead use structure,func ptr.
10.use preprocessor directive instead multi line commands ,and commands all coding line to improve readability
11.dont write complex code ,code read by others should be understand who going to work on same project further
12.Use qualifiers properly const and volatile 
13.use uint8_t,uint32_t to avoid compiler optimization
13.dont mix signed and unsigned variables for operations
14.dont use bitwise operators for negative numbers undefined behaviour
15.use extern and static variables 
16.Use static code analyzer tool check code and make documents

flow start -state machines-debug fast
avoid global variables -to avoid other functions modify
library function like arduino -for reusability
use isr-to set flags and receive datas
use manufacture code for testing hardwares and change it for ur requirements
Limit Function Complexity-build large problem into small problem
code documentation properly
agile process development
update technology
use diffrent datasheets
avoid bit fields
use hal on multiple kit so check portablity


/*************************************** end of tips **************************/





REsources:

Personally, I would rather recommend the books of Scoot Meyers, 
Herb Sutter and James O. Coplien, as well as multi-platform code management by Kevin Jameson
 as well as a pinch of Domain Driven Design and of course patterns.


/**************Note: personal ref  ***************/

Developments

1.solar theft & rfid licence
2.loom Automation
3.iot based cnc monitoring

software maintanance :

4.fish feeding
5.pressure monitoring
6.glcd rudder unit / HMI
7.compress control

software develops :

8.hand sanitizer v1
9.wet grinder control

10.hand sanitizer v2 with pcb deisgn
11.Temperature Thermal printer 
12.RTC motor control using BT andriod v1
13.GPS RTC clock / Cloud RTC clock
14.GPS RTC clock / Cloud RTC clock v2

water purifier
line follower bot
object avoidance bot
home automation using iot 
object detection using ML
HMI dashboard using qt creator
pcb design projects



/************** personal ref  ***************/







